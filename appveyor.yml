clone_depth: 1

skip_commits:
  message: /(iiod|IIOD):.*/
    
environment:
  # Tell msys2 to add mingw64 to the path
  MSYSTEM: MINGW64
  # Tell msys2 to inherit the current directory when starting the shell
  CHERE_INVOKING: 1
  matrix:
    - BUILD_TYPE: mingw
      GENERATOR: Unix Makefiles
    - BUILD_TYPE: msvc
      GENERATOR: Visual Studio 12

platform:
  - x64
  - x86

configuration:
  - Release

install:
  - if "%BUILD_TYPE%"=="mingw" (
      IF "%platform%"=="x64" set COMPILER="mingw64"
      IF "%platform%"=="x86" set COMPILER="mingw32"
      IF "%platform%"=="x64" set ARCH="x86_64"
      IF "%platform%"=="x86" set ARCH="i686"
    )
  - echo %COMPILER%
  - echo %ARCH%
  - echo "Checking out sub-modules..."
  - git clone --depth 1 https://github.com/analogdevicesinc/libiio.git
  #- git submodule update --init
  - echo "Downloading deps..."
  - cd c:\
  - appveyor DownloadFile http://swdownloads.analog.com/cse/build/libiio-win-deps.zip
  - 7z x -y "c:\libiio-win-deps.zip" > nul
  - choco install InnoSetup
  - set PATH=%PATH%;"C:\Program Files (x86)\Inno Setup 5"
  - set PATH=%PATH%;"/bin:/usr/bin:/${COMPILER}/bin:/c/Program\ Files/Git/cmd:/c/Windows/System32"
  - ps: |
        if ($env:BUILD_TYPE -eq 'mingw') {
            $dependencies = %COMPILER%"/mingw-w64-"%ARCH%"-gcc,"
                            %COMPILER%"/mingw-w64-"%ARCH%"-cmake,"
                            %COMPILER%"/mingw-w64-"%ARCH%"-libusb,"
                            %COMPILER%"/mingw-w64-"%ARCH%"-libxml2"
            C:\msys64\usr\bin\bash -lc "pacman --noconfirm -S "%COMPILER%"/mingw-w64-"%ARCH%"-freetype "%COMPILER%"/mingw-w64-"%ARCH%"-fontconfig" 2> $null
          
            # redirect err to null to prevent warnings from becoming errors
            # workaround to prevent pacman from failing due to cyclical dependencie
            'C:\msys64\usr\bin\bash -lc "pacman --noconfirm -S $dependencies" 2> $null'
        }

before_build:
  - mkdir %BUILD_TYPE%_%platform%_build
  - cd %BUILD_TYPE%_%platform%_build
  - ps: |
        if ($env:BUILD_TYPE -eq 'msvc') {
          # redirect stderr and change the exit code to prevent powershell from cancelling the build if cmake prints a warning
          # cmd /C 'cmake -G "Visual Studio 15 2017 Win64" -DCITRA_USE_BUNDLED_QT=1 -DCITRA_USE_BUNDLED_SDL2=1 -DCMAKE_USE_OPENSSL=0 .. 2>&1 && exit 0'
          cmd /C 'cmake -G "Visual Studio 12 Win64" -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_IPV6:BOOL=OFF -DCSHARP_BINDINGS:BOOL=OFF -DPYTHON_BINDINGS:BOOL=OFF -DLIBXML2_LIBRARIES="C:\\libs\\64\\libxml2.lib" -DLIBUSB_LIBRARIES="C:\\libs\\64\\libusb-1.0.lib" -DLIBSERIALPORT_LIBRARIES="C:\\libs\\64\\libserialport.dll.a" -DCMAKE_SYSTEM_PREFIX_PATH="C:" .. 2>&1'
        } else {
          
          C:\msys64\usr\bin\bash.exe -lc 'cmake -G "%GENERATOR%" -DWITH_TESTS:BOOL=OFF -DWITH_DOC:BOOL=OFF -DWITH_MATLAB_BINDINGS:BOOL=OFF -DCSHARP_BINDINGS:BOOL=OFF -DPYTHON_BINDINGS:BOOL=OFF .. 2>&1'
        }
  - cd ..

build_script:
  - ps: |
        if ($env:BUILD_TYPE -eq 'msvc') {
          # https://www.appveyor.com/docs/build-phase
          msbuild msvc_build/citra.sln /maxcpucount /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
        } else {
          C:\msys64\usr\bin\bash.exe -lc 'make -j install -C mingw_build/ 2>&1'
        }

artifacts:
  - path: $(BUILD_ZIP)
    name: build
    type: zip
  - path: $(BUILD_SYMBOLS)
    name: debugsymbols
  - path: $(BUILD_UPDATE)
    name: update
